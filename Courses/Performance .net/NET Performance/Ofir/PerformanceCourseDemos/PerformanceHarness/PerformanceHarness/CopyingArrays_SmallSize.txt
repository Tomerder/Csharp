using System;
using System.Runtime.InteropServices;
using PerformanceHarness;

public static class Arrays_Small
{
	public static byte[] First = new byte[256];
	public static byte[] Second = new byte[256];

	static Arrays_Small()
	{
		Random random = new Random();
		for (int i = 0; i < First.Length; ++i)
			First[i] = (byte) random.Next(0, 255);
	}
}

//[MeasurableClass]
public static class NaiveCopyTest_Small
{
	[MeasurableMethod]
	static void Measure()
	{
		for (int __i = 0; __i < %NUMBER_OF_ITERATIONS%; ++__i)
		{
			for (int i = 0; i < Arrays_Small.First.Length; ++i)
				Arrays_Small.Second[i] = Arrays_Small.First[i];
		}
	}
}

[MeasurableClass]
public static class FixedCopyTest_Small
{
	[MeasurableMethod]
	static unsafe void Measure()
	{
		for (int __i = 0; __i < %NUMBER_OF_ITERATIONS%; ++__i)
		{
			fixed (byte* p1 = &Arrays_Small.First[0])
			fixed (byte* p2 = &Arrays_Small.Second[0])
			{
				long* pSrc = (long*)p1;
				long* pDst = (long*)p2;
				int len = Arrays_Small.First.Length / (sizeof(long) * 8);
				for (int i = 0; i < len; ++i)
				{
					*pSrc++ = *pDst++;
					*pSrc++ = *pDst++;
					*pSrc++ = *pDst++;
					*pSrc++ = *pDst++;
					*pSrc++ = *pDst++;
					*pSrc++ = *pDst++;
					*pSrc++ = *pDst++;
					*pSrc++ = *pDst++;
				}
			}
		}
	}
}

[MeasurableClass]
public static class ArrayCopyTest_Small
{
	[MeasurableMethod]
	static void Measure()
	{
		for (int __i = 0; __i < %NUMBER_OF_ITERATIONS%; ++__i)
		{
			Array.Copy(Arrays_Small.First, Arrays_Small.Second, Arrays_Small.First.Length);
		}
	}
}

[MeasurableClass]
public static class BlockCopyTest_Small
{
	[MeasurableMethod]
	static void Measure()
	{
		for (int __i = 0; __i < %NUMBER_OF_ITERATIONS%; ++__i)
		{
			Buffer.BlockCopy(Arrays_Small.First, 0, Arrays_Small.Second, 0, Arrays_Small.First.Length);
		}
	}
}

[MeasurableClass]
public static class IntopCopyTest_Small
{
	[DllImport("MSVCRT.DLL")]
	private static extern void memcpy(byte[] pDst, byte[] pSrc, int count);

	[MeasurableMethod]
	static void Measure()
	{
		for (int __i = 0; __i < %NUMBER_OF_ITERATIONS%; ++__i)
		{
			memcpy(Arrays_Small.First, Arrays_Small.Second, Arrays_Small.First.Length);
		}
	}
}

//[MeasurableClass]
public static class Ipps5CopyTest_Small
{
	[DllImport("IPPS.DLL")]
	private static extern IntPtr ippsCopy_8u(byte[] pDst, byte[] pSrc, int count);

	[MeasurableMethod]
	static void Measure()
	{
		for (int __i = 0; __i < %NUMBER_OF_ITERATIONS%; ++__i)
		{
			ippsCopy_8u(Arrays_Small.First, Arrays_Small.Second, Arrays_Small.First.Length);
		}
	}
}