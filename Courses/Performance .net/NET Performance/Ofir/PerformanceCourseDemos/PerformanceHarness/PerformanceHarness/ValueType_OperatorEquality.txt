using System;
using System.Collections.Generic;
using PerformanceHarness;

[assembly: MeasurableClass(typeof(OperatorEquality))]

public static class OperatorEquality
{
	private struct MyValueType
	{
		public int X;
		public float Y;
		public MyValueType(int x, float y) { X = x; Y = y; }
		public override bool Equals(object other)
		{
			MyValueType mvt = (MyValueType) other;
			return X == mvt.X && Y == mvt.Y;
		}
		public static bool operator==(MyValueType v1, MyValueType v2)
		{
			return v1.X == v2.X && v1.Y == v2.Y;
		}
		public static bool operator!=(MyValueType v1, MyValueType v2)
		{ return !(v1 == v2); }
		public override int GetHashCode() { return 0; }
	}

	private static volatile bool _x;

	[MeasurableMethod]
	static void Measure()
	{
		MyValueType mvt1 = new MyValueType(5, 3.2f);
		MyValueType mvt2 = new MyValueType(5, 3.3f);
		for (int __i = 0; __i < %NUMBER_OF_ITERATIONS%; ++__i)
		{
			_x = (mvt1 == mvt2);
		}
	}
}